/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;

using Autodesk.Forge.Client;
using Autodesk.Forge.Model;

namespace Autodesk.Forge
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IThreeLeggedApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GET authorize
        /// </summary>
        /// <remarks>
        /// This is the browser URL to redirect an end user to in order to acquire the user’s consent for your app to access the specified resources. Note: You do not call this URL directly in your server code. See the Get a 3-Legged Token tutorial for more information on how to use this endpoint.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="responseType">Must be code</param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <param name="scope">Space-separated list of required scopes Note: A URL-encoded space is* &#x60;&#x60;%20&#x60;&#x60;. See the* &#x60;Scopes &lt;/en/docs/oauth/v2/overview/scopes&gt;&#x60; *page for more information on when scopes are required.  (optional)</param>
        /// <param name="state">A URL-encoded payload containing arbitrary data that the authentication flow will pass back verbatim in a state query parameter to the callback URL  (optional)</param>
        /// <returns>string</returns>
        string Authorize (string clientId, string responseType, string redirectUri, Scope[] scope = null, string state = null);

        /// <summary>
        /// POST gettoken
        /// </summary>
        /// <remarks>
        /// Exchange an authorization code extracted from a GET authorize callback for a three-legged access token.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;authorization_code&#x60;&#x60;</param>
        /// <param name="code">The autorization code captured from the code query parameter when the GET authorize redirected back to the callback URL </param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <returns>Bearer</returns>
        /*Bearer*/dynamic Gettoken (string clientId, string clientSecret, string grantType, string code, string redirectUri);

        /// <summary>
        /// POST gettoken
        /// </summary>
        /// <remarks>
        /// Exchange an authorization code extracted from a GET authorize callback for a three-legged access token.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;authorization_code&#x60;&#x60;</param>
        /// <param name="code">The autorization code captured from the code query parameter when the GET authorize redirected back to the callback URL </param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <returns>ApiResponse of Bearer</returns>
        ApiResponse</*Bearer*/dynamic> GettokenWithHttpInfo (string clientId, string clientSecret, string grantType, string code, string redirectUri);
        /// <summary>
        /// POST refreshtoken
        /// </summary>
        /// <remarks>
        /// Acquire a new access token by using the refresh token provided by the POST gettoken endpoint. See the Field Guide for more information about refresh tokens.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;refresh_token&#x60;&#x60;</param>
        /// <param name="refreshToken">The refresh token used to acquire a new access token </param>
        /// <param name="scope">Space-separated list of required scopes If this parameter is omitted, the returned access token will have the same scopes as the original access token. If this parameter is specified, it must represent a subset of the scopes present in the original access token. Note: A URL-encoded space is %20.  (optional)</param>
        /// <returns>Bearer</returns>
        /*Bearer*/dynamic Refreshtoken (string clientId, string clientSecret, string grantType, string refreshToken, Scope[] scope = null);

        /// <summary>
        /// POST refreshtoken
        /// </summary>
        /// <remarks>
        /// Acquire a new access token by using the refresh token provided by the POST gettoken endpoint. See the Field Guide for more information about refresh tokens.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;refresh_token&#x60;&#x60;</param>
        /// <param name="refreshToken">The refresh token used to acquire a new access token </param>
        /// <param name="scope">Space-separated list of required scopes If this parameter is omitted, the returned access token will have the same scopes as the original access token. If this parameter is specified, it must represent a subset of the scopes present in the original access token. Note: A URL-encoded space is %20.  (optional)</param>
        /// <returns>ApiResponse of Bearer</returns>
        ApiResponse</*Bearer*/dynamic> RefreshtokenWithHttpInfo (string clientId, string clientSecret, string grantType, string refreshToken, Scope[] scope = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// POST gettoken
        /// </summary>
        /// <remarks>
        /// Exchange an authorization code extracted from a GET authorize callback for a three-legged access token.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;authorization_code&#x60;&#x60;</param>
        /// <param name="code">The autorization code captured from the code query parameter when the GET authorize redirected back to the callback URL </param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <returns>Task of Bearer</returns>
        System.Threading.Tasks.Task</*Bearer*/dynamic> GettokenAsync (string clientId, string clientSecret, string grantType, string code, string redirectUri);

        /// <summary>
        /// POST gettoken
        /// </summary>
        /// <remarks>
        /// Exchange an authorization code extracted from a GET authorize callback for a three-legged access token.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;authorization_code&#x60;&#x60;</param>
        /// <param name="code">The autorization code captured from the code query parameter when the GET authorize redirected back to the callback URL </param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <returns>Task of ApiResponse (Bearer)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Bearer*/dynamic>> GettokenAsyncWithHttpInfo (string clientId, string clientSecret, string grantType, string code, string redirectUri);
        /// <summary>
        /// POST refreshtoken
        /// </summary>
        /// <remarks>
        /// Acquire a new access token by using the refresh token provided by the POST gettoken endpoint. See the Field Guide for more information about refresh tokens.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;refresh_token&#x60;&#x60;</param>
        /// <param name="refreshToken">The refresh token used to acquire a new access token </param>
        /// <param name="scope">Space-separated list of required scopes If this parameter is omitted, the returned access token will have the same scopes as the original access token. If this parameter is specified, it must represent a subset of the scopes present in the original access token. Note: A URL-encoded space is %20.  (optional)</param>
        /// <returns>Task of Bearer</returns>
        System.Threading.Tasks.Task</*Bearer*/dynamic> RefreshtokenAsync (string clientId, string clientSecret, string grantType, string refreshToken, Scope[] scope = null);

        /// <summary>
        /// POST refreshtoken
        /// </summary>
        /// <remarks>
        /// Acquire a new access token by using the refresh token provided by the POST gettoken endpoint. See the Field Guide for more information about refresh tokens.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;refresh_token&#x60;&#x60;</param>
        /// <param name="refreshToken">The refresh token used to acquire a new access token </param>
        /// <param name="scope">Space-separated list of required scopes If this parameter is omitted, the returned access token will have the same scopes as the original access token. If this parameter is specified, it must represent a subset of the scopes present in the original access token. Note: A URL-encoded space is %20.  (optional)</param>
        /// <returns>Task of ApiResponse (Bearer)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Bearer*/dynamic>> RefreshtokenAsyncWithHttpInfo (string clientId, string clientSecret, string grantType, string refreshToken, Scope[] scope = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ThreeLeggedApi : IThreeLeggedApi
    {
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeLeggedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ThreeLeggedApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeLeggedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ThreeLeggedApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// GET authorize This is the browser URL to redirect an end user to in order to acquire the user’s consent for your app to access the specified resources. Note: You do not call this URL directly in your server code. See the Get a 3-Legged Token tutorial for more information on how to use this endpoint.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="responseType">Must be code</param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <param name="scope">Space-separated list of required scopes Note: A URL-encoded space is* &#x60;&#x60;%20&#x60;&#x60;. See the* &#x60;Scopes &lt;/en/docs/oauth/v2/overview/scopes&gt;&#x60; *page for more information on when scopes are required.  (optional)</param>
        /// <param name="state">A URL-encoded payload containing arbitrary data that the authentication flow will pass back verbatim in a state query parameter to the callback URL  (optional)</param>
        /// <returns></returns>
        public string Authorize (string clientId, string responseType, string redirectUri, Scope[] scope = null, string state = null)
        {
            //AuthorizeWithHttpInfo(clientId, responseType, redirectUri, scope, state);

            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ThreeLeggedApi->Authorize");
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new ApiException(400, "Missing required parameter 'responseType' when calling ThreeLeggedApi->Authorize");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling ThreeLeggedApi->Authorize");

            var localVarPath = "/authentication/v2/authorize";
            var localVarFormParams = new Dictionary<String, String>();
            if (clientId != null) localVarFormParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (responseType != null) localVarFormParams.Add("response_type", Configuration.ApiClient.ParameterToString(responseType)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", Configuration.ApiClient.ParameterToString(scope.AsString ())); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter

            var request = new RestRequest(localVarPath, Method.Get);
            // add form parameter, if any
            foreach(var param in localVarFormParams)
                request.AddParameter(param.Key, param.Value);

            Uri uri =this.Configuration.ApiClient.RestClient.BuildUri(request) ;
            return (uri.AbsoluteUri) ;
        }

        /// <summary>
        /// POST gettoken Exchange an authorization code extracted from a GET authorize callback for a three-legged access token.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;authorization_code&#x60;&#x60;</param>
        /// <param name="code">The autorization code captured from the code query parameter when the GET authorize redirected back to the callback URL </param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <returns>Bearer</returns>
        public /*Bearer*/dynamic Gettoken (string clientId, string clientSecret, string grantType, string code, string redirectUri)
        {
             ApiResponse</*Bearer*/dynamic> localVarResponse = GettokenWithHttpInfo(clientId, clientSecret, grantType, code, redirectUri);
             return localVarResponse.Data;
        }

        /// <summary>
        /// POST gettoken Exchange an authorization code extracted from a GET authorize callback for a three-legged access token.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;authorization_code&#x60;&#x60;</param>
        /// <param name="code">The autorization code captured from the code query parameter when the GET authorize redirected back to the callback URL </param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <returns>ApiResponse of Bearer</returns>
        public ApiResponse< /*Bearer*/dynamic > GettokenWithHttpInfo (string clientId, string clientSecret, string grantType, string code, string redirectUri)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ThreeLeggedApi->Gettoken");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling ThreeLeggedApi->Gettoken");
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling ThreeLeggedApi->Gettoken");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ThreeLeggedApi->Gettoken");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling ThreeLeggedApi->Gettoken");

            var localVarPath = "/authentication/v2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            String localVarAuthorizationHeader = Configuration.ApiClient.SetAuthorizationHeader(client_id: clientId, client_secret: clientSecret);

            if (localVarAuthorizationHeader != null)
                localVarHeaderParams.Add("Authorization", localVarAuthorizationHeader);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantType != null) localVarFormParams.Add("grant_type", Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (code != null) localVarFormParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Gettoken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Bearer*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Bearer)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bearer)));

        }

        /// <summary>
        /// POST gettoken Exchange an authorization code extracted from a GET authorize callback for a three-legged access token.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;authorization_code&#x60;&#x60;</param>
        /// <param name="code">The autorization code captured from the code query parameter when the GET authorize redirected back to the callback URL </param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <returns>Task of Bearer</returns>
        public async System.Threading.Tasks.Task</*Bearer*/dynamic> GettokenAsync (string clientId, string clientSecret, string grantType, string code, string redirectUri)
        {
             ApiResponse</*Bearer*/dynamic> localVarResponse = await GettokenAsyncWithHttpInfo(clientId, clientSecret, grantType, code, redirectUri);
             return localVarResponse.Data;

        }

        /// <summary>
        /// POST gettoken Exchange an authorization code extracted from a GET authorize callback for a three-legged access token.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;authorization_code&#x60;&#x60;</param>
        /// <param name="code">The autorization code captured from the code query parameter when the GET authorize redirected back to the callback URL </param>
        /// <param name="redirectUri">URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. </param>
        /// <returns>Task of ApiResponse (Bearer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Bearer*/dynamic>> GettokenAsyncWithHttpInfo (string clientId, string clientSecret, string grantType, string code, string redirectUri)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ThreeLeggedApi->Gettoken");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling ThreeLeggedApi->Gettoken");
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling ThreeLeggedApi->Gettoken");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ThreeLeggedApi->Gettoken");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling ThreeLeggedApi->Gettoken");

            var localVarPath = "/authentication/v2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            String localVarAuthorizationHeader = Configuration.ApiClient.SetAuthorizationHeader(client_id: clientId, client_secret: clientSecret);

            if (localVarAuthorizationHeader != null)
                localVarHeaderParams.Add("Authorization", localVarAuthorizationHeader);
            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantType != null) localVarFormParams.Add("grant_type", Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (code != null) localVarFormParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Gettoken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Bearer*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Bearer)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bearer)));

        }

        /// <summary>
        /// POST refreshtoken Acquire a new access token by using the refresh token provided by the POST gettoken endpoint. See the Field Guide for more information about refresh tokens.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;refresh_token&#x60;&#x60;</param>
        /// <param name="refreshToken">The refresh token used to acquire a new access token </param>
        /// <param name="scope">Space-separated list of required scopes If this parameter is omitted, the returned access token will have the same scopes as the original access token. If this parameter is specified, it must represent a subset of the scopes present in the original access token. Note: A URL-encoded space is %20.  (optional)</param>
        /// <returns>Bearer</returns>
        public /*Bearer*/dynamic Refreshtoken (string clientId, string clientSecret, string grantType, string refreshToken, Scope[] scope = null)
        {
             ApiResponse</*Bearer*/dynamic> localVarResponse = RefreshtokenWithHttpInfo(clientId, clientSecret, grantType, refreshToken, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// POST refreshtoken Acquire a new access token by using the refresh token provided by the POST gettoken endpoint. See the Field Guide for more information about refresh tokens.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;refresh_token&#x60;&#x60;</param>
        /// <param name="refreshToken">The refresh token used to acquire a new access token </param>
        /// <param name="scope">Space-separated list of required scopes If this parameter is omitted, the returned access token will have the same scopes as the original access token. If this parameter is specified, it must represent a subset of the scopes present in the original access token. Note: A URL-encoded space is %20.  (optional)</param>
        /// <returns>ApiResponse of Bearer</returns>
        public ApiResponse< /*Bearer*/dynamic > RefreshtokenWithHttpInfo (string clientId, string clientSecret, string grantType, string refreshToken, Scope[] scope = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ThreeLeggedApi->Refreshtoken");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling ThreeLeggedApi->Refreshtoken");
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling ThreeLeggedApi->Refreshtoken");
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling ThreeLeggedApi->Refreshtoken");

            var localVarPath = "/authentication/v2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            String localVarAuthorizationHeader = Configuration.ApiClient.SetAuthorizationHeader(client_id: clientId, client_secret: clientSecret);

            if (localVarAuthorizationHeader != null)
                localVarHeaderParams.Add("Authorization", localVarAuthorizationHeader);
            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantType != null) localVarFormParams.Add("grant_type", Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", Configuration.ApiClient.ParameterToString(scope.AsString ())); // form parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Refreshtoken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Bearer*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Bearer)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bearer)));

        }

        /// <summary>
        /// POST refreshtoken Acquire a new access token by using the refresh token provided by the POST gettoken endpoint. See the Field Guide for more information about refresh tokens.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;refresh_token&#x60;&#x60;</param>
        /// <param name="refreshToken">The refresh token used to acquire a new access token </param>
        /// <param name="scope">Space-separated list of required scopes If this parameter is omitted, the returned access token will have the same scopes as the original access token. If this parameter is specified, it must represent a subset of the scopes present in the original access token. Note: A URL-encoded space is %20.  (optional)</param>
        /// <returns>Task of Bearer</returns>
        public async System.Threading.Tasks.Task</*Bearer*/dynamic> RefreshtokenAsync (string clientId, string clientSecret, string grantType, string refreshToken, Scope[] scope = null)
        {
             ApiResponse</*Bearer*/dynamic> localVarResponse = await RefreshtokenAsyncWithHttpInfo(clientId, clientSecret, grantType, refreshToken, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// POST refreshtoken Acquire a new access token by using the refresh token provided by the POST gettoken endpoint. See the Field Guide for more information about refresh tokens.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be &#x60;&#x60;refresh_token&#x60;&#x60;</param>
        /// <param name="refreshToken">The refresh token used to acquire a new access token </param>
        /// <param name="scope">Space-separated list of required scopes If this parameter is omitted, the returned access token will have the same scopes as the original access token. If this parameter is specified, it must represent a subset of the scopes present in the original access token. Note: A URL-encoded space is %20.  (optional)</param>
        /// <returns>Task of ApiResponse (Bearer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Bearer*/dynamic>> RefreshtokenAsyncWithHttpInfo (string clientId, string clientSecret, string grantType, string refreshToken, Scope[] scope = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ThreeLeggedApi->Refreshtoken");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling ThreeLeggedApi->Refreshtoken");
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling ThreeLeggedApi->Refreshtoken");
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling ThreeLeggedApi->Refreshtoken");

            var localVarPath = "/authentication/v2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            String localVarAuthorizationHeader = Configuration.ApiClient.SetAuthorizationHeader(client_id: clientId, client_secret: clientSecret);

            if (localVarAuthorizationHeader != null)
                localVarHeaderParams.Add("Authorization", localVarAuthorizationHeader);
            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantType != null) localVarFormParams.Add("grant_type", Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", Configuration.ApiClient.ParameterToString(scope.AsString ())); // form parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Refreshtoken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Bearer*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Bearer)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bearer)));

        }

    }
}
