/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newtonsoft.Json.Linq;
using Autodesk.Forge.Client;
using Autodesk.Forge.Model;
using Version=Autodesk.Forge.Model.Version;

namespace Autodesk.Forge
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a collection of projects for a given &#x60;hub_id&#x60;. A project represents an A360 project or a BIM 360 project which is set up under an A360 hub or BIM 360 account, respectively. Within a hub or an account, multiple projects can be created to be used. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Projects</returns>
        /*Projects*/dynamic GetHubProjects (string hubId, List<string> filterId = null, List<string> filterExtensionType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a collection of projects for a given &#x60;hub_id&#x60;. A project represents an A360 project or a BIM 360 project which is set up under an A360 hub or BIM 360 account, respectively. Within a hub or an account, multiple projects can be created to be used. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>ApiResponse of Projects</returns>
        ApiResponse</*Projects*/dynamic> GetHubProjectsWithHttpInfo (string hubId, List<string> filterId = null, List<string> filterExtensionType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a project for a given &#x60;project_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Project</returns>
        /*Project*/dynamic GetProject (string hubId, string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a project for a given &#x60;project_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse</*Project*/dynamic> GetProjectWithHttpInfo (string hubId, string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the hub for a given &#x60;project_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Hub</returns>
        /*Hub*/dynamic GetProjectHub (string hubId, string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the hub for a given &#x60;project_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>ApiResponse of Hub</returns>
        ApiResponse</*Hub*/dynamic> GetProjectHubWithHttpInfo (string hubId, string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of the highest level folders the user has access to for a given project
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>TopFolders</returns>
        /*TopFolders*/dynamic GetProjectTopFolders (string hubId, string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of the highest level folders the user has access to for a given project
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>ApiResponse of TopFolders</returns>
        ApiResponse</*TopFolders*/dynamic> GetProjectTopFoldersWithHttpInfo (string hubId, string projectId);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a storage location in the OSS where data can be uploaded to. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the storage is created for</param>
        /// <returns>StorageCreated</returns>
        /*StorageCreated*/dynamic PostStorage (string projectId, CreateStorage body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a storage location in the OSS where data can be uploaded to. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the storage is created for</param>
        /// <returns>ApiResponse of StorageCreated</returns>
        ApiResponse</*StorageCreated*/dynamic> PostStorageWithHttpInfo (string projectId, CreateStorage body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new version of an item in the 'data' domain service.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the version is created for</param>
        /// <returns>VersionCreated</returns>
        /*StorageCreated*/
        dynamic PostVersion(string projectId, CreateVersion body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new version of an item in the 'data' domain service.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the version is created for</param>
        /// <returns>ApiResponse of VersionCreated</returns>
        ApiResponse</*StorageCreated*/dynamic> PostVersionWithHttpInfo(string projectId, CreateVersion body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a collection of projects for a given &#x60;hub_id&#x60;. A project represents an A360 project or a BIM 360 project which is set up under an A360 hub or BIM 360 account, respectively. Within a hub or an account, multiple projects can be created to be used. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of Projects</returns>
        System.Threading.Tasks.Task</*Projects*/dynamic> GetHubProjectsAsync (string hubId, List<string> filterId = null, List<string> filterExtensionType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a collection of projects for a given &#x60;hub_id&#x60;. A project represents an A360 project or a BIM 360 project which is set up under an A360 hub or BIM 360 account, respectively. Within a hub or an account, multiple projects can be created to be used. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Projects*/dynamic>> GetHubProjectsAsyncWithHttpInfo (string hubId, List<string> filterId = null, List<string> filterExtensionType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a project for a given &#x60;project_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task</*Project*/dynamic> GetProjectAsync (string hubId, string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a project for a given &#x60;project_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Project*/dynamic>> GetProjectAsyncWithHttpInfo (string hubId, string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the hub for a given &#x60;project_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of Hub</returns>
        System.Threading.Tasks.Task</*Hub*/dynamic> GetProjectHubAsync (string hubId, string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the hub for a given &#x60;project_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of ApiResponse (Hub)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Hub*/dynamic>> GetProjectHubAsyncWithHttpInfo (string hubId, string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of the highest level folders the user has access to for a given project
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of TopFolders</returns>
        System.Threading.Tasks.Task</*TopFolders*/dynamic> GetProjectTopFoldersAsync (string hubId, string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of the highest level folders the user has access to for a given project
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of ApiResponse (TopFolders)</returns>
        System.Threading.Tasks.Task<ApiResponse</*TopFolders*/dynamic>> GetProjectTopFoldersAsyncWithHttpInfo (string hubId, string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a storage location in the OSS where data can be uploaded to. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the storage is created for</param>
        /// <returns>Task of StorageCreated</returns>
        System.Threading.Tasks.Task</*StorageCreated*/dynamic> PostStorageAsync (string projectId, CreateStorage body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a storage location in the OSS where data can be uploaded to. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the storage is created for</param>
        /// <returns>Task of ApiResponse (StorageCreated)</returns>
        System.Threading.Tasks.Task<ApiResponse</*StorageCreated*/dynamic>> PostStorageAsyncWithHttpInfo (string projectId, CreateStorage body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IProjectsApi
    {
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a collection of projects for a given &#x60;hub_id&#x60;. A project represents an A360 project or a BIM 360 project which is set up under an A360 hub or BIM 360 account, respectively. Within a hub or an account, multiple projects can be created to be used. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Projects</returns>
        public /*Projects*/dynamic GetHubProjects (string hubId, List<string> filterId = null, List<string> filterExtensionType = null)
        {
             ApiResponse</*Projects*/dynamic> localVarResponse = GetHubProjectsWithHttpInfo(hubId, filterId, filterExtensionType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a collection of projects for a given &#x60;hub_id&#x60;. A project represents an A360 project or a BIM 360 project which is set up under an A360 hub or BIM 360 account, respectively. Within a hub or an account, multiple projects can be created to be used. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>ApiResponse of Projects</returns>
        public ApiResponse< /*Projects*/dynamic > GetHubProjectsWithHttpInfo (string hubId, List<string> filterId = null, List<string> filterExtensionType = null)
        {
            // verify the required parameter 'hubId' is set
            if (hubId == null)
                throw new ApiException(400, "Missing required parameter 'hubId' when calling ProjectsApi->GetHubProjects");

            var localVarPath = "/project/v1/hubs/{hub_id}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hubId != null) localVarPathParams.Add("hub_id", Configuration.ApiClient.ParameterToString(hubId)); // path parameter
            if (filterId != null) localVarQueryParams.Add("filter[id]", Configuration.ApiClient.ParameterToString(filterId)); // query parameter
            if (filterExtensionType != null) localVarQueryParams.Add("filter[extension.type]", Configuration.ApiClient.ParameterToString(filterExtensionType)); // query parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHubProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Projects*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Projects)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Projects)));
            
        }

        /// <summary>
        ///  Returns a collection of projects for a given &#x60;hub_id&#x60;. A project represents an A360 project or a BIM 360 project which is set up under an A360 hub or BIM 360 account, respectively. Within a hub or an account, multiple projects can be created to be used. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of Projects</returns>
        public async System.Threading.Tasks.Task</*Projects*/dynamic> GetHubProjectsAsync (string hubId, List<string> filterId = null, List<string> filterExtensionType = null)
        {
             ApiResponse</*Projects*/dynamic> localVarResponse = await GetHubProjectsAsyncWithHttpInfo(hubId, filterId, filterExtensionType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a collection of projects for a given &#x60;hub_id&#x60;. A project represents an A360 project or a BIM 360 project which is set up under an A360 hub or BIM 360 account, respectively. Within a hub or an account, multiple projects can be created to be used. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Projects*/dynamic>> GetHubProjectsAsyncWithHttpInfo (string hubId, List<string> filterId = null, List<string> filterExtensionType = null)
        {
            // verify the required parameter 'hubId' is set
            if (hubId == null)
                throw new ApiException(400, "Missing required parameter 'hubId' when calling ProjectsApi->GetHubProjects");

            var localVarPath = "/project/v1/hubs/{hub_id}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hubId != null) localVarPathParams.Add("hub_id", Configuration.ApiClient.ParameterToString(hubId)); // path parameter
            if (filterId != null) localVarQueryParams.Add("filter[id]", Configuration.ApiClient.ParameterToString(filterId)); // query parameter
            if (filterExtensionType != null) localVarQueryParams.Add("filter[extension.type]", Configuration.ApiClient.ParameterToString(filterExtensionType)); // query parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHubProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Projects*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Projects)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Projects)));
            
        }

        /// <summary>
        ///  Returns a project for a given &#x60;project_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Project</returns>
        public /*Project*/dynamic GetProject (string hubId, string projectId)
        {
             ApiResponse</*Project*/dynamic> localVarResponse = GetProjectWithHttpInfo(hubId, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a project for a given &#x60;project_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>ApiResponse of Project</returns>
        public ApiResponse< /*Project*/dynamic > GetProjectWithHttpInfo (string hubId, string projectId)
        {
            // verify the required parameter 'hubId' is set
            if (hubId == null)
                throw new ApiException(400, "Missing required parameter 'hubId' when calling ProjectsApi->GetProject");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetProject");

            var localVarPath = "/project/v1/hubs/{hub_id}/projects/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hubId != null) localVarPathParams.Add("hub_id", Configuration.ApiClient.ParameterToString(hubId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Project*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Project)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
            
        }

        /// <summary>
        ///  Returns a project for a given &#x60;project_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task</*Project*/dynamic> GetProjectAsync (string hubId, string projectId)
        {
             ApiResponse</*Project*/dynamic> localVarResponse = await GetProjectAsyncWithHttpInfo(hubId, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a project for a given &#x60;project_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Project*/dynamic>> GetProjectAsyncWithHttpInfo (string hubId, string projectId)
        {
            // verify the required parameter 'hubId' is set
            if (hubId == null)
                throw new ApiException(400, "Missing required parameter 'hubId' when calling ProjectsApi->GetProject");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetProject");

            var localVarPath = "/project/v1/hubs/{hub_id}/projects/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hubId != null) localVarPathParams.Add("hub_id", Configuration.ApiClient.ParameterToString(hubId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Project*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Project)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
            
        }

        /// <summary>
        ///  Returns the hub for a given &#x60;project_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Hub</returns>
        public /*Hub*/dynamic GetProjectHub (string hubId, string projectId)
        {
             ApiResponse</*Hub*/dynamic> localVarResponse = GetProjectHubWithHttpInfo(hubId, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the hub for a given &#x60;project_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>ApiResponse of Hub</returns>
        public ApiResponse< /*Hub*/dynamic > GetProjectHubWithHttpInfo (string hubId, string projectId)
        {
            // verify the required parameter 'hubId' is set
            if (hubId == null)
                throw new ApiException(400, "Missing required parameter 'hubId' when calling ProjectsApi->GetProjectHub");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetProjectHub");

            var localVarPath = "/project/v1/hubs/{hub_id}/projects/{project_id}/hub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hubId != null) localVarPathParams.Add("hub_id", Configuration.ApiClient.ParameterToString(hubId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectHub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Hub*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Hub)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hub)));
            
        }

        /// <summary>
        ///  Returns the hub for a given &#x60;project_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of Hub</returns>
        public async System.Threading.Tasks.Task</*Hub*/dynamic> GetProjectHubAsync (string hubId, string projectId)
        {
             ApiResponse</*Hub*/dynamic> localVarResponse = await GetProjectHubAsyncWithHttpInfo(hubId, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the hub for a given &#x60;project_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of ApiResponse (Hub)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Hub*/dynamic>> GetProjectHubAsyncWithHttpInfo (string hubId, string projectId)
        {
            // verify the required parameter 'hubId' is set
            if (hubId == null)
                throw new ApiException(400, "Missing required parameter 'hubId' when calling ProjectsApi->GetProjectHub");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetProjectHub");

            var localVarPath = "/project/v1/hubs/{hub_id}/projects/{project_id}/hub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hubId != null) localVarPathParams.Add("hub_id", Configuration.ApiClient.ParameterToString(hubId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectHub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Hub*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Hub)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hub)));
            
        }

        /// <summary>
        ///  Returns the details of the highest level folders the user has access to for a given project
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>TopFolders</returns>
        public /*TopFolders*/dynamic GetProjectTopFolders (string hubId, string projectId)
        {
             ApiResponse</*TopFolders*/dynamic> localVarResponse = GetProjectTopFoldersWithHttpInfo(hubId, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the details of the highest level folders the user has access to for a given project
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>ApiResponse of TopFolders</returns>
        public ApiResponse< /*TopFolders*/dynamic > GetProjectTopFoldersWithHttpInfo (string hubId, string projectId)
        {
            // verify the required parameter 'hubId' is set
            if (hubId == null)
                throw new ApiException(400, "Missing required parameter 'hubId' when calling ProjectsApi->GetProjectTopFolders");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetProjectTopFolders");

            var localVarPath = "/project/v1/hubs/{hub_id}/projects/{project_id}/topFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hubId != null) localVarPathParams.Add("hub_id", Configuration.ApiClient.ParameterToString(hubId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectTopFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*TopFolders*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(TopFolders)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopFolders)));
            
        }

        /// <summary>
        ///  Returns the details of the highest level folders the user has access to for a given project
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of TopFolders</returns>
        public async System.Threading.Tasks.Task</*TopFolders*/dynamic> GetProjectTopFoldersAsync (string hubId, string projectId)
        {
             ApiResponse</*TopFolders*/dynamic> localVarResponse = await GetProjectTopFoldersAsyncWithHttpInfo(hubId, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the details of the highest level folders the user has access to for a given project
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubId">the &#x60;hub id&#x60; for the current operation</param>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <returns>Task of ApiResponse (TopFolders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*TopFolders*/dynamic>> GetProjectTopFoldersAsyncWithHttpInfo (string hubId, string projectId)
        {
            // verify the required parameter 'hubId' is set
            if (hubId == null)
                throw new ApiException(400, "Missing required parameter 'hubId' when calling ProjectsApi->GetProjectTopFolders");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetProjectTopFolders");

            var localVarPath = "/project/v1/hubs/{hub_id}/projects/{project_id}/topFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hubId != null) localVarPathParams.Add("hub_id", Configuration.ApiClient.ParameterToString(hubId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectTopFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*TopFolders*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(TopFolders)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopFolders)));
            
        }

        /// <summary>
        ///  Creates a storage location in the OSS where data can be uploaded to. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the storage is created for</param>
        /// <returns>StorageCreated</returns>
        public /*StorageCreated*/dynamic PostStorage (string projectId, CreateStorage body)
        {
             ApiResponse</*StorageCreated*/dynamic> localVarResponse = PostStorageWithHttpInfo(projectId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a storage location in the OSS where data can be uploaded to. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the storage is created for</param>
        /// <returns>ApiResponse of StorageCreated</returns>
        public ApiResponse< /*StorageCreated*/dynamic > PostStorageWithHttpInfo (string projectId, CreateStorage body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->PostStorage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsApi->PostStorage");

            var localVarPath = "/data/v1/projects/{project_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*StorageCreated*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(StorageCreated)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageCreated)));
            
        }

        /// <summary>
        ///  Creates a new version of an item in the 'data' domain service.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the version is created for</param>
        /// <returns>VersionCreated</returns>
        public /*StorageCreated*/dynamic PostVersion(string projectId, CreateVersion body)
        {
            ApiResponse</*StorageCreated*/dynamic> localVarResponse = PostVersionWithHttpInfo(projectId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new version of an item in the 'data' domain service.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the version is created for</param>
        /// <returns>ApiResponse of VersionCreated</returns>
        public ApiResponse< /*StorageCreated*/dynamic> PostVersionWithHttpInfo(string projectId, CreateVersion body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->PostVersion");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsApi->PostVersion");

            var localVarPath = "/data/v1/projects/{project_id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (body != null
                     && (body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                            || body.GetType() == typeof(System.IO.MemoryStream)
                            || body.GetType() == typeof(System.IO.StreamReader)
                           )
                    )
            {
                localVarPostBody = Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if (body != null)
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*StorageCreated*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(VersionCreated)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionCreated)));

        }

        /// <summary>
        ///  Creates a storage location in the OSS where data can be uploaded to. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the storage is created for</param>
        /// <returns>Task of StorageCreated</returns>
        public async System.Threading.Tasks.Task</*StorageCreated*/dynamic> PostStorageAsync (string projectId, CreateStorage body)
        {
             ApiResponse</*StorageCreated*/dynamic> localVarResponse = await PostStorageAsyncWithHttpInfo(projectId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a storage location in the OSS where data can be uploaded to. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="body">describe the file the storage is created for</param>
        /// <returns>Task of ApiResponse (StorageCreated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*StorageCreated*/dynamic>> PostStorageAsyncWithHttpInfo (string projectId, CreateStorage body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->PostStorage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsApi->PostStorage");

            var localVarPath = "/data/v1/projects/{project_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                //"application/vnd.api+json"
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStorage", localVarResponse);
                if (exception != null)
                    throw exception;
            }

            return new ApiResponse</*StorageCreated*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(StorageCreated)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageCreated)));
            
        }

    }
}
